---
alwaysApply: false
description: Task list execution and progress management for this Go repo (quality gates, docs, PR discipline)
---
# Task List Management

Guidelines for managing task lists in Markdown to track progress on completing a PRD in this repository.

## Task Implementation
- **One sub-task at a time:** Do not start the next sub‑task until you ask the user for permission and they say "yes" or "y".
- **Completion protocol:**
  1. When you finish a **sub‑task**, immediately mark it as completed by changing `[ ]` to `[x]`.
  2. If **all** subtasks under a parent are `[x]`, follow this sequence:
    - **First**: Run only the relevant tests (avoid the entire suite):
      - By package: `go test ./internal/<pkg> -v -race`
      - Single test regex: `go test ./internal/<pkg> -v -race -run TestName`
      - Entry points: `go test ./cmd/<entrypoint> -v -race`
      - Integration (targeted): `go test -v -race -parallel=4 -tags=integration -timeout=5m -run Integration ./...`
    - **Only if all tests pass**: Stage changes (`git add .`)
    - **Clean up**: Remove any temporary files and temporary code before committing
    - **Commit**: Use a descriptive commit message that:
      - Uses conventional commit format (`feat:`, `fix:`, `refactor:`, `test:`, `docs:`)
      - Summarizes what was accomplished in the parent task
      - Lists key changes and additions
      - References the task number and PRD context
      - Formats the message as a single-line command using `-m` flags, e.g.:

        ```
        git commit -m "feat: add token revocation rules" -m "- Implements revoke path in manager" -m "- Adds unit tests for edge cases" -m "Related to tasks-prd-token.md"
        ```
  3. Once all subtasks are committed, mark the **parent task** as completed.
- Stop after each sub‑task and wait for the user's go‑ahead.

### Project-specific notes
- Prefer running only the affected Go tests when iterating; run `make test` before pushing.
- Always ensure linters pass: `make lint`. Format with `gofmt -w -s .` if needed.

## Task List Maintenance

1. **Update the task list as you work:**
   - Mark tasks and subtasks as completed (`[x]`).
   - Add new tasks if they emerge.

2. **Maintain the "Relevant Files" section:**
   - List every file created or modified.
   - Give each file a one‑line purpose.

## AI Instructions

When working with task lists, the AI must:

1. Update the task list file after each significant work item.
2. Follow the completion protocol (mark subtasks and parent tasks as completed).
3. Add newly discovered tasks.
4. Keep "Relevant Files" accurate and up to date.
5. Before starting work, check which sub‑task is next.
6. After implementing a sub‑task, update the file and then pause for user approval.

## Cross-links & Quality Gates
- **Project workflow**: `AGENTS.md` for repository standards and commands
- **PRs**: Use GitHub as in `AGENTS.md` (MCP tools recommended for PR metadata)
- **Quality gates**:
  - All tests pass: `make test` (and `-race`)
  - Coverage ≥ 90% (CI-style aggregation command in `AGENTS.md`)
  - Linters pass: `make lint`
- **Security**: See `docs/security.md`
